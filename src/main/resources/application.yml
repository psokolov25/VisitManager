application:
  api:
    swagger:
      path: /api-docs/swagger
      version: 3.19.4
      layout: StandaloneLayout
      deepLinking: true
      urls:
        - name: ubw-rest
          url: /api-docs/swagger/ubw-rest-0.1.yml
logger:
  levels: ALL
graphql:
  enabled: true
  graphiql: # enables the /graphiql endpoint to test calls against your graph.
    enabled: true
loki:
  url: '${LOKI_SERVER:`http://192.168.3.13:3100/loki/api/v1/push`}'
kafka:
  consumers:
    default:
      allow.auto.create.topics: true
  producers:
    default:
      allow.auto.create.topics: true
  bootstrap:
    servers: '${KAFKA_SERVER:`192.168.8.45:29092`}'

micronaut:

  server:
    port: 8080
    cors:
      enabled: true
  application:
    rules:

      callRuleApiUrl: http://localhost:8085/customcallrule
    returnTimeDelay: 8000
    name: visitmanager
    dataBusUrl: '${DATABUS_SERVER:`http://192.168.8.45:8082`}'
    #dataBusUrl: '${DATABUS_SERVER}'
    dataBusUrlRetryPeriod: '1s'
    dataBusUrlRetryMaxPeriod: '45m'
    dataBusUrlRetryRepeat: 3000
    configurationURL: '${CONFIG_SERVER:`http://localhost:8081`}'
    printerServiceURL: '${PRINTER_SERVER:`http://192.168.3.29:8084`}'
    printerRetryPeriod: '1s'
    printerRetryMaxPeriod: '45m'
    printerRetryRepeat: 30
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**

redis:
  uri: '${REDIS_SERVER:`redis://192.168.8.45:7379`}'
  #uri: redis://192.168.8.45:7379/5
  #uri: ${REDIS_SERVER}
  cache:
    key-serializer: io.micronaut.core.serialize.ObjectSerializer
    value-serializer: io.micronaut.core.serialize.ObjectSerializer

  caches:
    branches:
      charset: UTF-8


