/*
 * AuthService
 * Для работы со swagger необходимо выполнить обязательный рест-запрос \"`/authorization`\". В результате этого запроса будет получен идентификатор сессии (sid) — обязательный параметр для других рест-запросов.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.aritmos.model.keycloak;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.serde.annotation.Serdeable;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.*;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/** TinyUserInfo */
@Serdeable
@JsonPropertyOrder({
  TinyUserInfo.JSON_PROPERTY_NAME,
  TinyUserInfo.JSON_PROPERTY_DESCRIPTION,
  TinyUserInfo.JSON_PROPERTY_EMAIL,
  TinyUserInfo.JSON_PROPERTY_LOGIN
})
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class TinyUserInfo {

  public static final String JSON_PROPERTY_NAME = "name";
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  public static final String JSON_PROPERTY_EMAIL = "email";
  public static final String JSON_PROPERTY_LOGIN = "login";

  /** полное имя залогиненного пользователя */
  @NotNull
  @Schema(
      name = "name",
      example = "Иванов Иван",
      description = "полное имя залогиненного пользователя",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  /** Информация о пользователе(любой необходимый текст) */
  @NotNull
  @Schema(
      name = "description",
      example = "super admin",
      description = "Информация о пользователе(любой необходимый текст)",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(JsonInclude.Include.NON_NULL)
  private String description;

  /** Почтовый ящик */
  @NotNull
  @Schema(
      name = "email",
      example = "test@gmail.com",
      description = "Почтовый ящик",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_EMAIL)
  private String email;

  /** Логин пользователя */
  @NotNull
  @Schema(
      name = "login",
      example = "user01",
      description = "Логин пользователя",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_LOGIN)
  private String login;

  /**
   * Set name in a chainable fashion.
   *
   * @return The same instance of TinyUserInfo for chaining.
   */
  public TinyUserInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Set description in a chainable fashion.
   *
   * @return The same instance of TinyUserInfo for chaining.
   */
  public TinyUserInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Set email in a chainable fashion.
   *
   * @return The same instance of TinyUserInfo for chaining.
   */
  public TinyUserInfo email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Set login in a chainable fashion.
   *
   * @return The same instance of TinyUserInfo for chaining.
   */
  public TinyUserInfo login(String login) {
    this.login = login;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TinyUserInfo tinyUserInfo = (TinyUserInfo) o;
    return Objects.equals(name, tinyUserInfo.name)
        && Objects.equals(description, tinyUserInfo.description)
        && Objects.equals(email, tinyUserInfo.email)
        && Objects.equals(login, tinyUserInfo.login);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, email, login);
  }

  @Override
  public String toString() {
    return "TinyUserInfo("
        + "name: "
        + getName()
        + ", "
        + "description: "
        + getDescription()
        + ", "
        + "email: "
        + getEmail()
        + ", "
        + "login: "
        + getLogin()
        + ")";
  }
}
