/*
 * AuthService
 * Для работы со swagger необходимо выполнить обязательный рест-запрос \"`/authorization`\". В результате этого запроса будет получен идентификатор сессии (sid) — обязательный параметр для других рест-запросов.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.aritmos.model.keycloak;

import com.fasterxml.jackson.annotation.*;
import io.micronaut.serde.annotation.Serdeable;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.annotation.Generated;
import jakarta.validation.constraints.*;
import java.util.Objects;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/** ModuleRoleAccess */
@Serdeable
@JsonPropertyOrder({
  ModuleRoleAccess.JSON_PROPERTY_NAME,
  ModuleRoleAccess.JSON_PROPERTY_ROLE,
  ModuleRoleAccess.JSON_PROPERTY_ACCESS
})
@Builder
@Data
@NoArgsConstructor
@AllArgsConstructor
@Generated("io.micronaut.openapi.generator.JavaMicronautServerCodegen")
@JsonIgnoreProperties(ignoreUnknown = true)
@SuppressWarnings("unused")
public class ModuleRoleAccess {

  /** Имя JSON‑свойства: имя модуля. */
  public static final String JSON_PROPERTY_NAME = "name";
  /** Имя JSON‑свойства: требуемая роль. */
  public static final String JSON_PROPERTY_ROLE = "role";
  /** Имя JSON‑свойства: доступ разрешён/запрещён. */
  public static final String JSON_PROPERTY_ACCESS = "access";

  /** Имя модуля который нужно проверить на доступ */
  @NotNull
  @Schema(
      name = "name",
      example = "test_module",
      description = "Имя модуля который нужно проверить на доступ",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_NAME)
  private String name;

  /** Роль пользователя котороя должна предоставить доступ к модулю */
  @NotNull
  @Schema(
      name = "role",
      example = "operator",
      description = "Роль пользователя котороя должна предоставить доступ к модулю",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_ROLE)
  private String role;

  /** True предоставить доступ к модулю, false отказать в доступе */
  @NotNull
  @Schema(
      name = "access",
      example = "true",
      description = "True предоставить доступ к модулю, false отказать в доступе",
      requiredMode = Schema.RequiredMode.REQUIRED)
  @JsonProperty(JSON_PROPERTY_ACCESS)
  private Boolean access;

  /**
   * Установить имя модуля (chainable).
   *
   * @param name имя модуля
   * @return текущий экземпляр ModuleRoleAccess
   */
  public ModuleRoleAccess name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Установить роль (chainable).
   *
   * @param role роль
   * @return текущий экземпляр ModuleRoleAccess
   */
  public ModuleRoleAccess role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Установить доступ (chainable).
   *
   * @param access доступ
   * @return текущий экземпляр ModuleRoleAccess
   */
  public ModuleRoleAccess access(Boolean access) {
    this.access = access;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModuleRoleAccess moduleRoleAccess = (ModuleRoleAccess) o;
    return Objects.equals(name, moduleRoleAccess.name)
        && Objects.equals(role, moduleRoleAccess.role)
        && Objects.equals(access, moduleRoleAccess.access);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, role, access);
  }

  @Override
  public String toString() {
    return "ModuleRoleAccess("
        + "name: "
        + getName()
        + ", "
        + "role: "
        + getRole()
        + ", "
        + "access: "
        + getAccess()
        + ")";
  }
}
